/*
 *  Copyright (C) 2019-2020 bkosaraju
 *  All Rights Reserved.
 *  Licensed to the Apache Software Foundation (ASF) under one
 *  or more contributor license agreements.  See the NOTICE file
 *  distributed with this work for additional information
 *  regarding copyright ownership.  The ASF licenses this file
 *  to you under the Apache License, Version 2.0 (the
 *  "License"); you may not use this file except in compliance
 *  with the License.  You may obtain a copy of the License at
 *    http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

buildscript {
    ext.scalaVariant = "2.12"
    ext.sparkVersion = "3.0.0"
    ext.awsSDKVersion = "1.11.721"
    ext.imfutilsVersion = "1.02"
    repositories {
        maven {
            url "${gradle.artifactoryUrl}"
            if (System.getenv("ARTIFACTORY_USER") || Project.hasProperty('artifactoryUser')) {
                credentials {
                    username = System.getenv("ARTIFACTORY_USER") ?: artifactoryUser
                    password = System.getenv("ARTIFACTORY_PASSWORD") ?: artifactoryPassword
                }
            }
        }

        dependencies {
            classpath "org.ajoberstar:grgit:2.3.0"
            classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
        }
    }
}

plugins {
    id 'scala'
    id "org.scoverage" version "4.0.2"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "jacoco"
    id "java-library"
    id "com.adarshr.test-logger" version "1.3.0"
    id "maven-publish"
}

group "${gradle.projectGroup}"

repositories {
    maven {
        url "${gradle.artifactoryUrl}"
        if (System.getenv("ARTIFACTORY_USER") || Project.hasProperty('artifactoryUser')) {
            credentials {
                username = System.getenv("ARTIFACTORY_USER") ?: artifactoryUser
                password = System.getenv("ARTIFACTORY_PASSWORD") ?: artifactoryPassword
            }
        }
    }
    maven {
        url "https://dl.bintray.com/spark-packages/maven"
    }
}

configurations {
    assembly
    compile.extendsFrom assembly
    api.extendsFrom assembly

}

configurations {
    provided
    compile.extendsFrom provided
    api.extendsFrom provided
}

configurations {
    testImplementation.extendsFrom compileOnly
}

configurations {
    archivesBaseName = "${gradle.projectName}" + "_${scalaVariant}"

}


dependencies {

    api group: "org.scala-lang", name: "scala-library", version: "$scalaVariant.12"

    // Spark Packages
    compileOnly group : "org.apache.spark", name: "spark-core_$scalaVariant", version: "$sparkVersion"
    compileOnly group: "org.apache.spark", name:  "spark-sql_$scalaVariant", version: "$sparkVersion"
    compileOnly group: "org.apache.spark", name:  "spark-hive_$scalaVariant", version: "$sparkVersion"

    //IMF Utilities
    api group: "io.github.bkosaraju", name: "utils_$scalaVariant", version: "$imfutilsVersion"

    //External Parsers
    api group: 'org.apache.spark', name: "spark-avro_$scalaVariant", version: '3.0.1'
    api group: 'za.co.absa.cobrix', name: "spark-cobol_$scalaVariant", version: '2.1.0'
    api group: "saurfang", name: "spark-sas7bdat", version: "3.0.0-s_$scalaVariant"

    // Use Scalatest for testing our library
    testImplementation group: "com.databricks", name: "spark-xml_$scalaVariant", version: "0.5.0"
    testImplementation group: "org.scalatest", name: "scalatest_$scalaVariant", version :"3.0.9"
    testImplementation group: "junit", name: "junit", version :"4.12"
    testImplementation group: "com.github.stefanbirkner", name: "system-rules", version: "1.16.0"
    testRuntime group: "org.pegdown", name: "pegdown", version: "1.6.0"
    testImplementation group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
    testImplementation group: 'com.h2database', name: 'h2', version: '1.4.194'
}

clean.doFirst{
    delete 'metastore_db'
    delete 'spark-warehouse'
}

compileScala {
    scalaCompileOptions.additionalParameters = ["-feature"]
}

shadowJar {
    zip64 true
    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
}

tasks.build.dependsOn tasks.shadowJar

test {
    useJUnit {}
    jvmArgs '-Xmx1024m'
    testLogging.showStandardStreams = true

}

testlogger {
    theme 'standard'
    showExceptions true
    slowThreshold 10000
    showSummary true
    showStandardStreams false
}


def gitlogDir = new java.io.File( project.projectDir.toString() + '/.git')
if (gitlogDir.exists()) {
    apply from: 'ci/git.gradle'
    apply from: 'ci/artifactory.gradle'
    apply from: 'ci/sonatype.gradle'
}